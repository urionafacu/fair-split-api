---
description: 
globs: 
alwaysApply: true
---
# Project Structure Guide

This project is a Django-based API for fair expense splitting, organized as follows:

- The main entry point is [manage.py](mdc:manage.py), which is used for administrative tasks and running the server.
- Project-wide settings are in [core/settings/](mdc:core/settings), with [base.py](mdc:core/settings/base.py) as the main configuration file. Environment-specific settings (e.g., [local.py](mdc:core/settings/local.py), [production.py](mdc:core/settings/production.py)) extend the base settings.
- URL routing is defined in [core/urls.py](mdc:core/urls.py), which includes API endpoints and authentication routes.
- The [accounts/](mdc:accounts) app manages user accounts, authentication, and permissions. It contains models, serializers, views, and viewsets for user management.
- The [expenses/](mdc:expenses) app handles expense groups, group members, and expenses. It contains models, serializers, views, and viewsets for expense management.
- Shared utilities and mixins are in [core/utils/](mdc:core/utils), such as [mixins.py](mdc:core/utils/mixins.py) for serializer logic.
- Docker support is provided via [Dockerfile](mdc:Dockerfile), [Dockerfile.dev](mdc:Dockerfile.dev), and [docker-compose.yml](mdc:docker-compose.yml).
- Python dependencies are listed in [requirements.txt](mdc:requirements.txt).

Each app (accounts, expenses) follows Django conventions with subfolders for models, migrations, and tests.